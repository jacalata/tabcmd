name: Package-and-release

# Pyinstaller requires that executables for each OS are built on that OS
# This action is intended to build on each of the supported OS's: mac, windows, linux.
# (We run two macos versions to build for arm and x64)
# and then upload all four files to a new release

# reference material:
# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://anshumanfauzdar.medium.com/using-github-actions-to-bundle-python-application-into-a-single-package-and-automatic-release-834bd42e0670

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  buildexe:
    name: Build executables and upload them to the existing release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
              pyinstaller tabcmd-windows.spec --clean --noconfirm --distpath ./dist/windows
            OUT_FILE_NAME: tabcmd.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
            CMD_INVOKE:  >
              ./dist/windows/tabcmd.exe
          - os: macos-13
            TARGET: macos
            CMD_BUILD:  |
              pyinstaller tabcmd-mac.spec --clean --noconfirm --distpath ./dist/macos/
              mac_bundle_step.sh
            BUNDLE_NAME: tabcmd.app
            OUT_FILE_NAME: tabcmd.app
            APP_BINARY_FILE_NAME: tabcmd
            ASSET_MIME: application/zip
            CMD_INVOKE:  >
              ./dist/macos/tabcmd.app/Contents/MacOS/tabcmd
          - os: macos-latest
            TARGET: macos
            CMD_BUILD:  |
              pyinstaller tabcmd-mac.spec --clean --noconfirm --distpath ./dist/macos/
              mac_bundle_step.sh
            BUNDLE_NAME: tabcmd.app
            OUT_FILE_NAME: tabcmd.app
            APP_BINARY_FILE_NAME: tabcmd
            ASSET_MIME: application/zip
            CMD_INVOKE: >
              ./dist/macos/tabcmd.app/Contents/MacOS/tabcmd
          - os: ubuntu-latest
            TARGET: ubuntu
          # https://stackoverflow.com/questions/31259856
          # /how-to-create-an-executable-file-for-linux-machine-using-pyinstaller
            CMD_BUILD: >
              pyinstaller --clean -y --distpath ./dist/ubuntu tabcmd-linux.spec &&
              chown -R --reference=. ./dist/ubuntu
            OUT_FILE_NAME: tabcmd
            CMD_INVOKE:  >
              ./dist/ubuntu/tabcmd

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Install dependencies and build
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
        pip install .
        pip install .[package]
        doit version
        python -m build

    - name: Build executable with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
      
    - name: Validate executable for ${{matrix.TARGET}}
      run: ${{matrix.CMD_INVOKE}}
      
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.OUT_FILE_NAME }}
        path: ./dist/${{ matrix.TARGET }}/${{ matrix.OUT_FILE_NAME }}
    
    - name: Copy binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./dist/${{ matrix.TARGET }}/${{ matrix.OUT_FILE_NAME }}
        asset_name: ${{ matrix.os }}-${{ matrix.OUT_FILE_NAME }}
        tag: ${{ github.ref_name }}
        overwrite: true
        promote: true
